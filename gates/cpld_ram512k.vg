/*
 * Gate level netlist for simulation to represent 74 series version of the
 * RAM expansion board. To be simulated directly vs the RTL and cpld versions
 * of the code.
 *
 * (C) 2018, Revaldinho
 * 
 */

module sn74xx_ram512k (
                       busreset_b,
                       adr15,
                       adr14, 
                       iorq_b,
                       mreq_b,
                       ramrd_b,
                       reset_b,
                       wr_b,
                       rd_b,
                       data,
                       ramdis,
                       ramcs_b,
                       ramadrhi,
                       ready,
                       clk,
                       ramoe_b,
                       ramwe_b );
  
  input [7:0]  data;
  output [4:0] ramadrhi;
  input        busreset_b, adr15, adr14, iorq_b, mreq_b;
  input        ramrd_b, reset_b, wr_b, rd_b, ready, clk;
  output       ramdis, ramcs_b, ramoe_b, ramwe_b;
  wire         clken_lat_qb, wclk, ramblock_q2, ramblock_q1, ramblock_q0, n14,
               n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28,
               n29, nn1;

  // Direct connection from CPC connector to RAM
  assign ramoe_b = ramrd_b;

  // Hex posedge triggered D-FF with clear*  74HCT174    
  DFFR ramblock_q4_u0 ( .d(data[4]), .phi(wclk), .resetb(reset_b), .q(ramadrhi[3]) );
  DFFR ramblock_q3_u0 ( .d(data[3]), .phi(wclk), .resetb(reset_b), .q(ramadrhi[2]) );
  DFFR ramblock_q5_u0 ( .d(data[5]), .phi(wclk), .resetb(reset_b), .q(ramadrhi[4]) );
  DFFR ramblock_q2_u0 ( .d(data[2]), .phi(wclk), .resetb(reset_b), .q(ramblock_q2) );
  DFFR ramblock_q1_u0 ( .d(data[1]), .phi(wclk), .resetb(reset_b), .q(ramblock_q1) );
  DFFR ramblock_q0_u0 ( .d(data[0]), .phi(wclk), .resetb(reset_b), .q(ramblock_q0) );
  // Dual latch 74HCT75  
  DLAT clken_lat_qb_reg ( .phi(clk), .d(n14), .q(clken_lat_qb) );
  DLAT spare_reg        ( .phi(1'b1), .d(1'b1), .q() );   

  // Quad NOR2 74HCT02
  NOR2 UECO ( .i0(nn1), .i1(iorq_b), .o(n15) );
  NOR2 U26  ( .i0(ramblock_q0), .i1(1'b0), .o(n17) );  // INV 
  NOR2 U34  ( .i0(adr15), .i1(1'b0), .o(n21) );          // INV
  NOR2 U45  ( .i0(ramcs_b), .i2(1'b0), .o(ramdis) );     // INV

  // Quad OR2 74HCT32  
  OR2 U24 ( .i0(ramblock_q0), .i1(ramblock_q1), .o(n24) );
  OR2 U27 ( .i0(wr_b), .i1(mreq_b), .o(ramwe_b) );
  OR2 U29 ( .i0(clk), .i1(clken_lat_qb), .o(wclk) );
  OR2 U30 ( .i0(adr15), .i1(wr_b), .o(nn1) );

  // Triple NAND3 74HCT10   
  NAND3 U25 ( .i0(data[6]), .i1(data[7]), .i2(n15), .o(n14) );
  NAND3 U31 ( .i0(adr14), .i1(ramblock_q1), .i2(n27), .o(n16) );
  NAND3 U23 ( .i0(ramblock_q2), .i1(1'b1), .i2(1'b1), .o(n27) ); // INV 

  // Quad NAND2 74HCT00  
  NAND2 U32 ( .i0(n17), .i1(n16), .o(ramadrhi[0]) );
  NAND2 U33 ( .i0(n27), .i1(ramblock_q0), .o(n20) );
  NAND2 U35 ( .i0(n27), .i1(n21), .o(n18) );
  NAND2 U36 ( .i0(ramblock_q1), .i1(n18), .o(n19) );
  // Quad NAND2 74HCT00
  NAND2 U37 ( .i0(n20), .i1(n19), .o(ramadrhi[1]) );
  NAND2 U38 ( .i0(adr14), .i1(n21), .o(n22) );
  NAND2 U39 ( .i0(ramblock_q2), .i1(n22), .o(n29) );
  NAND2 U40 ( .i0(adr14), .i1(adr15), .o(n23) );
  // Quad NAND2 74HCT00
  NAND2 U41 ( .i0(ramblock_q0), .i1(n23), .o(n25) );
  NAND2 U42 ( .i0(n25), .i1(n24), .o(n26) );
  NAND2 U43 ( .i0(n27), .i1(n26), .o(n28) );
  NAND2 U44 ( .i0(n29), .i1(n28), .o(ramcs_b) );

endmodule





